// Generated from grammar/v1.0.0-beta.7x/YiniLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class YiniLexer extends Lexer {
	public static readonly YINI_MARKER = 1;
	public static readonly SECTION_HEAD = 2;
	public static readonly TERMINAL_TOKEN = 3;
	public static readonly SS = 4;
	public static readonly EUR = 5;
	public static readonly CARET = 6;
	public static readonly TILDE = 7;
	public static readonly GT = 8;
	public static readonly LT = 9;
	public static readonly EQ = 10;
	public static readonly HASH = 11;
	public static readonly COMMA = 12;
	public static readonly COLON = 13;
	public static readonly OB = 14;
	public static readonly CB = 15;
	public static readonly OC = 16;
	public static readonly CC = 17;
	public static readonly PLUS = 18;
	public static readonly DOLLAR = 19;
	public static readonly PC = 20;
	public static readonly AT = 21;
	public static readonly SEMICOLON = 22;
	public static readonly BOOLEAN_FALSE = 23;
	public static readonly BOOLEAN_TRUE = 24;
	public static readonly NULL = 25;
	public static readonly EMPTY_OBJECT = 26;
	public static readonly EMPTY_LIST = 27;
	public static readonly SHEBANG = 28;
	public static readonly KEY = 29;
	public static readonly IDENT = 30;
	public static readonly IDENT_BACKTICKED = 31;
	public static readonly NUMBER = 32;
	public static readonly STRING = 33;
	public static readonly TRIPLE_QUOTED_STRING = 34;
	public static readonly SINGLE_OR_DOUBLE = 35;
	public static readonly R_AND_C_STRING = 36;
	public static readonly HYPER_STRING = 37;
	public static readonly ESC_SEQ = 38;
	public static readonly ESC_SEQ_BASE = 39;
	public static readonly NL = 40;
	public static readonly SINGLE_NL = 41;
	public static readonly WS = 42;
	public static readonly BLOCK_COMMENT = 43;
	public static readonly COMMENT = 44;
	public static readonly LINE_COMMENT = 45;
	public static readonly INLINE_COMMENT = 46;
	public static readonly IDENT_INVALID = 47;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            "'\\u00A7'", 
                                                            "'\\u20AC'", 
                                                            "'^'", "'~'", 
                                                            "'>'", "'<'", 
                                                            "'='", "'#'", 
                                                            "','", "':'", 
                                                            "'['", "']'", 
                                                            "'{'", "'}'", 
                                                            "'+'", "'$'", 
                                                            "'%'", "'@'", 
                                                            "';'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "YINI_MARKER", 
                                                             "SECTION_HEAD", 
                                                             "TERMINAL_TOKEN", 
                                                             "SS", "EUR", 
                                                             "CARET", "TILDE", 
                                                             "GT", "LT", 
                                                             "EQ", "HASH", 
                                                             "COMMA", "COLON", 
                                                             "OB", "CB", 
                                                             "OC", "CC", 
                                                             "PLUS", "DOLLAR", 
                                                             "PC", "AT", 
                                                             "SEMICOLON", 
                                                             "BOOLEAN_FALSE", 
                                                             "BOOLEAN_TRUE", 
                                                             "NULL", "EMPTY_OBJECT", 
                                                             "EMPTY_LIST", 
                                                             "SHEBANG", 
                                                             "KEY", "IDENT", 
                                                             "IDENT_BACKTICKED", 
                                                             "NUMBER", "STRING", 
                                                             "TRIPLE_QUOTED_STRING", 
                                                             "SINGLE_OR_DOUBLE", 
                                                             "R_AND_C_STRING", 
                                                             "HYPER_STRING", 
                                                             "ESC_SEQ", 
                                                             "ESC_SEQ_BASE", 
                                                             "NL", "SINGLE_NL", 
                                                             "WS", "BLOCK_COMMENT", 
                                                             "COMMENT", 
                                                             "LINE_COMMENT", 
                                                             "INLINE_COMMENT", 
                                                             "IDENT_INVALID" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"YINI_MARKER", "EBD", "SECTION_HEAD", "SECTION_MARKER", "SECTION_MARKER_BASIC_REPEAT", 
		"SECTION_MARKER_SHORTHAND", "TERMINAL_TOKEN", "SS", "EUR", "CARET", "TILDE", 
		"GT", "LT", "EQ", "HASH", "COMMA", "COLON", "OB", "CB", "OC", "CC", "PLUS", 
		"DOLLAR", "PC", "AT", "SEMICOLON", "BOOLEAN_FALSE", "BOOLEAN_TRUE", "NULL", 
		"EMPTY_OBJECT", "EMPTY_LIST", "SHEBANG", "KEY", "IDENT", "IDENT_BACKTICKED", 
		"NUMBER", "STRING", "TRIPLE_QUOTED_STRING", "SINGLE_OR_DOUBLE", "R_AND_C_STRING", 
		"HYPER_STRING", "ESC_SEQ", "ESC_SEQ_BASE", "UNICODE16", "UNICODE32", "INTEGER", 
		"DECIMAL_INTEGER", "BIN_INTEGER", "OCT_INTEGER", "DUO_INTEGER", "HEX_INTEGER", 
		"DIGIT", "BIN_DIGIT", "OCT_DIGIT", "DUO_DIGIT", "HEX_DIGIT", "FRACTION", 
		"EXPONENT", "SIGN", "NL", "SINGLE_NL", "WS", "BLOCK_COMMENT", "COMMENT", 
		"LINE_COMMENT", "INLINE_COMMENT", "DISABLE_LINE", "IDENT_INVALID",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, YiniLexer._ATN, YiniLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "YiniLexer.g4"; }

	public get literalNames(): (string | null)[] { return YiniLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return YiniLexer.symbolicNames; }
	public get ruleNames(): string[] { return YiniLexer.ruleNames; }

	public get serializedATN(): number[] { return YiniLexer._serializedATN; }

	public get channelNames(): string[] { return YiniLexer.channelNames; }

	public get modeNames(): string[] { return YiniLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,47,642,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,149,8,2,10,2,12,2,
	152,9,2,1,2,1,2,5,2,156,8,2,10,2,12,2,159,9,2,1,2,5,2,162,8,2,10,2,12,2,
	165,9,2,1,2,1,2,4,2,169,8,2,11,2,12,2,170,1,3,1,3,3,3,175,8,3,1,4,4,4,178,
	8,4,11,4,12,4,179,1,4,4,4,183,8,4,11,4,12,4,184,1,4,4,4,188,8,4,11,4,12,
	4,189,1,4,4,4,193,8,4,11,4,12,4,194,3,4,197,8,4,1,5,1,5,1,5,1,5,3,5,203,
	8,5,1,5,1,5,5,5,207,8,5,10,5,12,5,210,9,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
	8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
	15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
	1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
	26,1,26,3,26,265,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
	276,8,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,
	31,1,31,1,31,5,31,293,8,31,10,31,12,31,296,9,31,1,31,1,31,1,32,1,32,1,33,
	1,33,5,33,304,8,33,10,33,12,33,307,9,33,1,33,1,33,3,33,311,8,33,1,34,1,
	34,5,34,315,8,34,10,34,12,34,318,9,34,1,34,1,34,1,35,1,35,1,35,3,35,325,
	8,35,3,35,327,8,35,1,35,3,35,330,8,35,1,35,3,35,333,8,35,1,35,1,35,4,35,
	337,8,35,11,35,12,35,338,1,35,3,35,342,8,35,1,35,3,35,345,8,35,1,35,1,35,
	1,35,1,35,3,35,351,8,35,3,35,353,8,35,1,36,1,36,3,36,357,8,36,1,37,3,37,
	360,8,37,1,37,1,37,1,37,1,37,1,37,5,37,367,8,37,10,37,12,37,370,9,37,1,
	37,1,37,1,37,1,37,1,38,1,38,3,38,378,8,38,1,39,3,39,381,8,39,1,39,1,39,
	1,39,1,39,5,39,387,8,39,10,39,12,39,390,9,39,1,39,1,39,3,39,394,8,39,1,
	39,1,39,1,39,1,39,5,39,400,8,39,10,39,12,39,403,9,39,1,39,3,39,406,8,39,
	1,40,1,40,1,40,5,40,411,8,40,10,40,12,40,414,9,40,1,40,1,40,1,40,1,40,5,
	40,420,8,40,10,40,12,40,423,9,40,1,40,3,40,426,8,40,1,41,1,41,1,41,3,41,
	431,8,41,1,42,1,42,1,42,1,42,3,42,437,8,42,1,43,1,43,1,43,1,43,1,43,1,43,
	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,3,
	46,459,8,46,1,46,1,46,5,46,463,8,46,10,46,12,46,466,9,46,3,46,468,8,46,
	1,47,1,47,1,47,4,47,473,8,47,11,47,12,47,474,1,47,1,47,4,47,479,8,47,11,
	47,12,47,480,3,47,483,8,47,1,48,1,48,1,48,4,48,488,8,48,11,48,12,48,489,
	1,49,1,49,1,49,4,49,495,8,49,11,49,12,49,496,1,50,1,50,1,50,4,50,502,8,
	50,11,50,12,50,503,1,50,1,50,4,50,508,8,50,11,50,12,50,509,3,50,512,8,50,
	1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,3,54,522,8,54,1,55,1,55,3,55,526,
	8,55,1,56,1,56,4,56,530,8,56,11,56,12,56,531,1,57,1,57,3,57,536,8,57,1,
	57,4,57,539,8,57,11,57,12,57,540,1,58,1,58,1,59,5,59,546,8,59,10,59,12,
	59,549,9,59,1,59,5,59,552,8,59,10,59,12,59,555,9,59,1,59,1,59,5,59,559,
	8,59,10,59,12,59,562,9,59,1,60,1,60,3,60,566,8,60,1,60,3,60,569,8,60,1,
	61,4,61,572,8,61,11,61,12,61,573,1,61,1,61,1,62,1,62,1,62,1,62,5,62,582,
	8,62,10,62,12,62,585,9,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,3,63,
	595,8,63,1,64,1,64,3,64,599,8,64,1,64,5,64,602,8,64,10,64,12,64,605,9,64,
	1,64,1,64,1,65,1,65,1,65,1,65,4,65,613,8,65,11,65,12,65,614,3,65,617,8,
	65,1,65,5,65,620,8,65,10,65,12,65,623,9,65,1,65,1,65,1,66,1,66,1,66,1,66,
	5,66,631,8,66,10,66,12,66,634,9,66,1,67,1,67,5,67,638,8,67,10,67,12,67,
	641,9,67,2,368,583,0,68,1,1,3,0,5,2,7,0,9,0,11,0,13,3,15,4,17,5,19,6,21,
	7,23,8,25,9,27,10,29,11,31,12,33,13,35,14,37,15,39,16,41,17,43,18,45,19,
	47,20,49,21,51,22,53,23,55,24,57,25,59,26,61,27,63,28,65,29,67,30,69,31,
	71,32,73,33,75,34,77,35,79,36,81,37,83,38,85,39,87,0,89,0,91,0,93,0,95,
	0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,40,
	121,41,123,42,125,43,127,44,129,45,131,46,133,0,135,47,1,0,36,2,0,89,89,
	121,121,2,0,73,73,105,105,2,0,78,78,110,110,2,0,9,9,32,32,1,0,49,57,2,0,
	69,69,101,101,2,0,68,68,100,100,2,0,70,70,102,102,2,0,65,65,97,97,2,0,76,
	76,108,108,2,0,83,83,115,115,2,0,79,79,111,111,2,0,84,84,116,116,2,0,82,
	82,114,114,2,0,85,85,117,117,2,0,8,10,12,13,3,0,65,90,95,95,97,122,4,0,
	48,57,65,90,95,95,97,122,2,0,0,31,96,96,4,0,67,67,82,82,99,99,114,114,3,
	0,10,10,13,13,39,39,3,0,10,10,13,13,34,34,2,0,72,72,104,104,1,0,39,39,1,
	0,34,34,2,0,34,34,39,39,9,0,48,48,63,63,92,92,97,98,102,102,110,110,114,
	114,116,116,118,118,2,0,66,66,98,98,2,0,90,90,122,122,2,0,88,88,120,120,
	1,0,48,57,1,0,48,55,4,0,69,69,88,88,101,101,120,120,2,0,65,70,97,102,2,
	0,43,43,45,45,2,0,10,10,13,13,706,0,1,1,0,0,0,0,5,1,0,0,0,0,13,1,0,0,0,
	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
	0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
	0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
	1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,135,1,
	0,0,0,1,137,1,0,0,0,3,143,1,0,0,0,5,150,1,0,0,0,7,174,1,0,0,0,9,196,1,0,
	0,0,11,202,1,0,0,0,13,211,1,0,0,0,15,216,1,0,0,0,17,218,1,0,0,0,19,220,
	1,0,0,0,21,222,1,0,0,0,23,224,1,0,0,0,25,226,1,0,0,0,27,228,1,0,0,0,29,
	230,1,0,0,0,31,232,1,0,0,0,33,234,1,0,0,0,35,236,1,0,0,0,37,238,1,0,0,0,
	39,240,1,0,0,0,41,242,1,0,0,0,43,244,1,0,0,0,45,246,1,0,0,0,47,248,1,0,
	0,0,49,250,1,0,0,0,51,252,1,0,0,0,53,264,1,0,0,0,55,275,1,0,0,0,57,277,
	1,0,0,0,59,282,1,0,0,0,61,285,1,0,0,0,63,288,1,0,0,0,65,299,1,0,0,0,67,
	310,1,0,0,0,69,312,1,0,0,0,71,352,1,0,0,0,73,356,1,0,0,0,75,359,1,0,0,0,
	77,377,1,0,0,0,79,405,1,0,0,0,81,425,1,0,0,0,83,430,1,0,0,0,85,432,1,0,
	0,0,87,438,1,0,0,0,89,444,1,0,0,0,91,454,1,0,0,0,93,467,1,0,0,0,95,482,
	1,0,0,0,97,484,1,0,0,0,99,491,1,0,0,0,101,511,1,0,0,0,103,513,1,0,0,0,105,
	515,1,0,0,0,107,517,1,0,0,0,109,521,1,0,0,0,111,525,1,0,0,0,113,527,1,0,
	0,0,115,533,1,0,0,0,117,542,1,0,0,0,119,547,1,0,0,0,121,568,1,0,0,0,123,
	571,1,0,0,0,125,577,1,0,0,0,127,594,1,0,0,0,129,598,1,0,0,0,131,616,1,0,
	0,0,133,626,1,0,0,0,135,635,1,0,0,0,137,138,5,64,0,0,138,139,7,0,0,0,139,
	140,7,1,0,0,140,141,7,2,0,0,141,142,7,1,0,0,142,2,1,0,0,0,143,144,2,48,
	49,0,144,145,2,48,49,0,145,146,2,48,49,0,146,4,1,0,0,0,147,149,7,3,0,0,
	148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,
	1,0,0,0,152,150,1,0,0,0,153,157,3,7,3,0,154,156,7,3,0,0,155,154,1,0,0,0,
	156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,163,1,0,0,0,159,157,
	1,0,0,0,160,162,3,123,61,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,
	0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,168,3,67,33,0,167,
	169,3,119,59,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,
	1,0,0,0,171,6,1,0,0,0,172,175,3,9,4,0,173,175,3,11,5,0,174,172,1,0,0,0,
	174,173,1,0,0,0,175,8,1,0,0,0,176,178,3,19,9,0,177,176,1,0,0,0,178,179,
	1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,197,1,0,0,0,181,183,3,21,10,
	0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,197,
	1,0,0,0,186,188,3,15,7,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,
	0,189,190,1,0,0,0,190,197,1,0,0,0,191,193,3,17,8,0,192,191,1,0,0,0,193,
	194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,177,1,0,
	0,0,196,182,1,0,0,0,196,187,1,0,0,0,196,192,1,0,0,0,197,10,1,0,0,0,198,
	203,3,19,9,0,199,203,3,21,10,0,200,203,3,15,7,0,201,203,3,17,8,0,202,198,
	1,0,0,0,202,199,1,0,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,204,1,0,0,0,
	204,208,7,4,0,0,205,207,3,103,51,0,206,205,1,0,0,0,207,210,1,0,0,0,208,
	206,1,0,0,0,208,209,1,0,0,0,209,12,1,0,0,0,210,208,1,0,0,0,211,212,5,47,
	0,0,212,213,7,5,0,0,213,214,7,2,0,0,214,215,7,6,0,0,215,14,1,0,0,0,216,
	217,5,167,0,0,217,16,1,0,0,0,218,219,5,8364,0,0,219,18,1,0,0,0,220,221,
	5,94,0,0,221,20,1,0,0,0,222,223,5,126,0,0,223,22,1,0,0,0,224,225,5,62,0,
	0,225,24,1,0,0,0,226,227,5,60,0,0,227,26,1,0,0,0,228,229,5,61,0,0,229,28,
	1,0,0,0,230,231,5,35,0,0,231,30,1,0,0,0,232,233,5,44,0,0,233,32,1,0,0,0,
	234,235,5,58,0,0,235,34,1,0,0,0,236,237,5,91,0,0,237,36,1,0,0,0,238,239,
	5,93,0,0,239,38,1,0,0,0,240,241,5,123,0,0,241,40,1,0,0,0,242,243,5,125,
	0,0,243,42,1,0,0,0,244,245,5,43,0,0,245,44,1,0,0,0,246,247,5,36,0,0,247,
	46,1,0,0,0,248,249,5,37,0,0,249,48,1,0,0,0,250,251,5,64,0,0,251,50,1,0,
	0,0,252,253,5,59,0,0,253,52,1,0,0,0,254,255,7,7,0,0,255,256,7,8,0,0,256,
	257,7,9,0,0,257,258,7,10,0,0,258,265,7,5,0,0,259,260,7,11,0,0,260,261,7,
	7,0,0,261,265,7,7,0,0,262,263,7,2,0,0,263,265,7,11,0,0,264,254,1,0,0,0,
	264,259,1,0,0,0,264,262,1,0,0,0,265,54,1,0,0,0,266,267,7,12,0,0,267,268,
	7,13,0,0,268,269,7,14,0,0,269,276,7,5,0,0,270,271,7,11,0,0,271,276,7,2,
	0,0,272,273,7,0,0,0,273,274,7,5,0,0,274,276,7,10,0,0,275,266,1,0,0,0,275,
	270,1,0,0,0,275,272,1,0,0,0,276,56,1,0,0,0,277,278,7,2,0,0,278,279,7,14,
	0,0,279,280,7,9,0,0,280,281,7,9,0,0,281,58,1,0,0,0,282,283,5,123,0,0,283,
	284,5,125,0,0,284,60,1,0,0,0,285,286,5,91,0,0,286,287,5,93,0,0,287,62,1,
	0,0,0,288,289,5,35,0,0,289,290,5,33,0,0,290,294,1,0,0,0,291,293,8,15,0,
	0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,
	1,0,0,0,296,294,1,0,0,0,297,298,3,119,59,0,298,64,1,0,0,0,299,300,3,67,
	33,0,300,66,1,0,0,0,301,305,7,16,0,0,302,304,7,17,0,0,303,302,1,0,0,0,304,
	307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,311,1,0,0,0,307,305,1,0,
	0,0,308,311,3,69,34,0,309,311,3,135,67,0,310,301,1,0,0,0,310,308,1,0,0,
	0,310,309,1,0,0,0,311,68,1,0,0,0,312,316,5,96,0,0,313,315,8,18,0,0,314,
	313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,319,1,0,
	0,0,318,316,1,0,0,0,319,320,5,96,0,0,320,70,1,0,0,0,321,326,3,91,45,0,322,
	324,5,46,0,0,323,325,3,91,45,0,324,323,1,0,0,0,324,325,1,0,0,0,325,327,
	1,0,0,0,326,322,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,330,3,115,57,
	0,329,328,1,0,0,0,329,330,1,0,0,0,330,353,1,0,0,0,331,333,3,117,58,0,332,
	331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,5,46,0,0,335,337,3,
	103,51,0,336,335,1,0,0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,
	0,339,341,1,0,0,0,340,342,3,115,57,0,341,340,1,0,0,0,341,342,1,0,0,0,342,
	353,1,0,0,0,343,345,3,117,58,0,344,343,1,0,0,0,344,345,1,0,0,0,345,350,
	1,0,0,0,346,351,3,95,47,0,347,351,3,97,48,0,348,351,3,99,49,0,349,351,3,
	101,50,0,350,346,1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,
	0,351,353,1,0,0,0,352,321,1,0,0,0,352,332,1,0,0,0,352,344,1,0,0,0,353,72,
	1,0,0,0,354,357,3,75,37,0,355,357,3,77,38,0,356,354,1,0,0,0,356,355,1,0,
	0,0,357,74,1,0,0,0,358,360,7,19,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,
	361,1,0,0,0,361,362,5,34,0,0,362,363,5,34,0,0,363,364,5,34,0,0,364,368,
	1,0,0,0,365,367,9,0,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,369,1,0,0,0,
	368,366,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,372,5,34,0,0,372,373,
	5,34,0,0,373,374,5,34,0,0,374,76,1,0,0,0,375,378,3,79,39,0,376,378,3,81,
	40,0,377,375,1,0,0,0,377,376,1,0,0,0,378,78,1,0,0,0,379,381,7,19,0,0,380,
	379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,388,5,39,0,0,383,384,5,
	92,0,0,384,387,5,39,0,0,385,387,8,20,0,0,386,383,1,0,0,0,386,385,1,0,0,
	0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,388,
	1,0,0,0,391,406,5,39,0,0,392,394,7,19,0,0,393,392,1,0,0,0,393,394,1,0,0,
	0,394,395,1,0,0,0,395,401,5,34,0,0,396,397,5,92,0,0,397,400,5,34,0,0,398,
	400,8,21,0,0,399,396,1,0,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,
	0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,406,5,34,0,0,
	405,380,1,0,0,0,405,393,1,0,0,0,406,80,1,0,0,0,407,408,7,22,0,0,408,412,
	5,39,0,0,409,411,8,23,0,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,
	0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,426,5,39,0,0,416,
	417,7,22,0,0,417,421,5,34,0,0,418,420,8,24,0,0,419,418,1,0,0,0,420,423,
	1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,
	424,426,5,34,0,0,425,407,1,0,0,0,425,416,1,0,0,0,426,82,1,0,0,0,427,428,
	5,92,0,0,428,431,7,25,0,0,429,431,3,85,42,0,430,427,1,0,0,0,430,429,1,0,
	0,0,431,84,1,0,0,0,432,436,5,92,0,0,433,437,7,26,0,0,434,437,3,87,43,0,
	435,437,3,89,44,0,436,433,1,0,0,0,436,434,1,0,0,0,436,435,1,0,0,0,437,86,
	1,0,0,0,438,439,5,117,0,0,439,440,3,111,55,0,440,441,3,111,55,0,441,442,
	3,111,55,0,442,443,3,111,55,0,443,88,1,0,0,0,444,445,5,85,0,0,445,446,3,
	111,55,0,446,447,3,111,55,0,447,448,3,111,55,0,448,449,3,111,55,0,449,450,
	3,111,55,0,450,451,3,111,55,0,451,452,3,111,55,0,452,453,3,111,55,0,453,
	90,1,0,0,0,454,455,3,93,46,0,455,92,1,0,0,0,456,468,5,48,0,0,457,459,3,
	117,58,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,464,7,4,0,
	0,461,463,3,103,51,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,
	465,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,467,456,1,0,0,0,467,458,1,0,
	0,0,468,94,1,0,0,0,469,470,5,48,0,0,470,472,7,27,0,0,471,473,3,105,52,0,
	472,471,1,0,0,0,473,474,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,483,
	1,0,0,0,476,478,5,37,0,0,477,479,3,105,52,0,478,477,1,0,0,0,479,480,1,0,
	0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,469,1,0,0,0,482,
	476,1,0,0,0,483,96,1,0,0,0,484,485,5,48,0,0,485,487,7,11,0,0,486,488,3,
	107,53,0,487,486,1,0,0,0,488,489,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,
	0,490,98,1,0,0,0,491,492,5,48,0,0,492,494,7,28,0,0,493,495,3,109,54,0,494,
	493,1,0,0,0,495,496,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,100,1,0,
	0,0,498,499,5,48,0,0,499,501,7,29,0,0,500,502,3,111,55,0,501,500,1,0,0,
	0,502,503,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,512,1,0,0,0,505,507,
	5,35,0,0,506,508,3,111,55,0,507,506,1,0,0,0,508,509,1,0,0,0,509,507,1,0,
	0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,498,1,0,0,0,511,505,1,0,0,0,512,
	102,1,0,0,0,513,514,7,30,0,0,514,104,1,0,0,0,515,516,2,48,49,0,516,106,
	1,0,0,0,517,518,7,31,0,0,518,108,1,0,0,0,519,522,3,103,51,0,520,522,7,32,
	0,0,521,519,1,0,0,0,521,520,1,0,0,0,522,110,1,0,0,0,523,526,3,103,51,0,
	524,526,7,33,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,112,1,0,0,0,527,529,
	5,46,0,0,528,530,3,103,51,0,529,528,1,0,0,0,530,531,1,0,0,0,531,529,1,0,
	0,0,531,532,1,0,0,0,532,114,1,0,0,0,533,535,7,5,0,0,534,536,3,117,58,0,
	535,534,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,539,3,103,51,0,538,
	537,1,0,0,0,539,540,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,116,1,0,
	0,0,542,543,7,34,0,0,543,118,1,0,0,0,544,546,3,123,61,0,545,544,1,0,0,0,
	546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,553,1,0,0,0,549,547,
	1,0,0,0,550,552,3,127,63,0,551,550,1,0,0,0,552,555,1,0,0,0,553,551,1,0,
	0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,553,1,0,0,0,556,560,3,121,60,0,
	557,559,3,127,63,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,
	561,1,0,0,0,561,120,1,0,0,0,562,560,1,0,0,0,563,565,5,13,0,0,564,566,5,
	10,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,569,1,0,0,0,567,569,5,10,0,0,
	568,563,1,0,0,0,568,567,1,0,0,0,569,122,1,0,0,0,570,572,7,3,0,0,571,570,
	1,0,0,0,572,573,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,
	575,576,6,61,0,0,576,124,1,0,0,0,577,578,5,47,0,0,578,579,5,42,0,0,579,
	583,1,0,0,0,580,582,9,0,0,0,581,580,1,0,0,0,582,585,1,0,0,0,583,584,1,0,
	0,0,583,581,1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,42,0,0,587,
	588,5,47,0,0,588,589,1,0,0,0,589,590,6,62,0,0,590,126,1,0,0,0,591,595,3,
	129,64,0,592,595,3,131,65,0,593,595,3,125,62,0,594,591,1,0,0,0,594,592,
	1,0,0,0,594,593,1,0,0,0,595,128,1,0,0,0,596,599,3,133,66,0,597,599,5,59,
	0,0,598,596,1,0,0,0,598,597,1,0,0,0,599,603,1,0,0,0,600,602,8,35,0,0,601,
	600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,1,0,
	0,0,605,603,1,0,0,0,606,607,6,64,0,0,607,130,1,0,0,0,608,609,5,47,0,0,609,
	617,5,47,0,0,610,612,5,35,0,0,611,613,7,3,0,0,612,611,1,0,0,0,613,614,1,
	0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,608,1,0,0,0,616,
	610,1,0,0,0,617,621,1,0,0,0,618,620,8,35,0,0,619,618,1,0,0,0,620,623,1,
	0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,624,
	625,6,65,0,0,625,132,1,0,0,0,626,627,5,45,0,0,627,628,5,45,0,0,628,632,
	1,0,0,0,629,631,8,35,0,0,630,629,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,
	0,632,633,1,0,0,0,633,134,1,0,0,0,634,632,1,0,0,0,635,639,7,30,0,0,636,
	638,7,17,0,0,637,636,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,
	0,0,0,640,136,1,0,0,0,641,639,1,0,0,0,75,0,150,157,163,170,174,179,184,
	189,194,196,202,208,264,275,294,305,310,316,324,326,329,332,338,341,344,
	350,352,356,359,368,377,380,386,388,393,399,401,405,412,421,425,430,436,
	458,464,467,474,480,482,489,496,503,509,511,521,525,531,535,540,547,553,
	560,565,568,573,583,594,598,603,614,616,621,632,639,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!YiniLexer.__ATN) {
			YiniLexer.__ATN = new ATNDeserializer().deserialize(YiniLexer._serializedATN);
		}

		return YiniLexer.__ATN;
	}


	static DecisionsToDFA = YiniLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}